<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>home on 水行舟</title>
    <link>https://shuixingzhou.github.io/</link>
    <description>Recent content in home on 水行舟</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <lastBuildDate>Mon, 09 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://shuixingzhou.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RBlogdown文章发布之再测试</title>
      <link>https://shuixingzhou.github.io/post/rblogdown-article-post-test-again/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/rblogdown-article-post-test-again/</guid>
      <description>&lt;p&gt;最近遇到一件很囧的事情，由于很忙（其实是很懒。。。），个人网站已经荒废了很久。最近偶有所感，想要重新拾掇起网站时竟然发现已经忘了怎么发布文章！
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>sed学习要点</title>
      <link>https://shuixingzhou.github.io/post/sed_tutorial/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/sed_tutorial/</guid>
      <description>&lt;p&gt;The acronym &lt;code&gt;SED&lt;/code&gt; stands for &lt;strong&gt;Stream EDitor&lt;/strong&gt;. It is a simple yet powerful utility that parses the text and transforms it seamlessly. SED was developed during 1973–74 by Lee E. McMahon of Bell Labs. Today, it runs on all major operating systems.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入学习python装饰器</title>
      <link>https://shuixingzhou.github.io/post/steps-to-python-decorators/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/steps-to-python-decorators/</guid>
      <description>&lt;p&gt;如果拜读过大牛的代码，会发现他们有用到热衷炫酷的装饰器。可是当去查看装饰器的定义时，各种定义和解释常常让人一头雾水。本教程逐步深入装饰器的原理，从最简单的函数开始，到多层装饰器，一步一步拨云见日，让人豁然开朗。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NGS sequence analysis with R / Bioconductor: RNA-Seq workflow</title>
      <link>https://shuixingzhou.github.io/post/ngs-sequence-analysis-with-r-bioconductor-rna-seq-workflow/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/ngs-sequence-analysis-with-r-bioconductor-rna-seq-workflow/</guid>
      <description>&lt;p&gt;&lt;strong&gt;ATTENTION:&lt;/strong&gt; This post i found on the Internet, all rights reserved to the origin authors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;URL:&lt;/strong&gt; &lt;a href=&#34;http://biocluster.ucr.edu/~rkaundal/workshops/R_mar2016/RNAseq.html#integrated-development-environment-ide-for-r&#34;&gt;http://biocluster.ucr.edu/~rkaundal/workshops/R_mar2016/RNAseq.html#integrated-development-environment-ide-for-r&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pip安装路上的各种坑</title>
      <link>https://shuixingzhou.github.io/post/pip-installation-problems/</link>
      <pubDate>Thu, 14 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/pip-installation-problems/</guid>
      <description>&lt;p&gt;最近使用&lt;code&gt;pip&lt;/code&gt;安装python扩展包的时候，又遇到了许多问题，现在一一记录下来，以备日后查询。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Windows下生成git ssh公钥</title>
      <link>https://shuixingzhou.github.io/post/windows-git-ssh/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/windows-git-ssh/</guid>
      <description>&lt;p&gt;Git是一款开源版本控制系统（Version Conrol System, VCS），由大神Linus用C写成。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>毅力，为何如此绝望</title>
      <link>https://shuixingzhou.github.io/life/despairing-perseverance/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/life/despairing-perseverance/</guid>
      <description>今天听了TED的一个视频，视频中说成功人士大多都具有很强的毅力。结合自己的经历，深以为然。
毅力一直都是我渴望、但是又难以得到的东西。
买了一些书籍，如《自控力》，来提高自己的毅力。拿起书本时，被书中的教导深深折服，放心书本数日，一切又回归平静。
。。。。</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04LTS更新日记</title>
      <link>https://shuixingzhou.github.io/post/ubuntu-update-note/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/ubuntu-update-note/</guid>
      <description>&lt;p&gt;两年前因为好奇装上了&lt;b&gt;Ubuntu16.04LTS&lt;/b&gt;，之后一发不可收拾，从此走上了不折腾不舒服斯基的道路。参考网上资料、购买书籍或者自己瞎几把捣鼓，加固态硬盘，扩充内存条，装双系统等，在自己条件可及的情况下把这台老当益壮的惠普折腾的够呛，而自己也在&lt;code&gt;Linux&lt;/code&gt;这个坑里越陷越深。
4月26号发布了期待已久的的&lt;b&gt;Ubuntu18.04LTS&lt;/b&gt;，第一时间也上手尝试了一下。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>杂乱无章的心情</title>
      <link>https://shuixingzhou.github.io/life/emotions-in-chaos/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/life/emotions-in-chaos/</guid>
      <description>&lt;p&gt;心情如同窗外乱飞的柳絮，莫名其妙无处可着。肆无忌惮的消耗着本来朦胧的诗意，最终剩下的只有敬而远之的距离。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>春天的美好与惆怅</title>
      <link>https://shuixingzhou.github.io/life/depression-on-spring/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/life/depression-on-spring/</guid>
      <description>&lt;p&gt;院子里的桃花、樱花竞相开放，以各自最美好的姿态享受着春天的风和日丽，同时也为春天增加了别样的色彩。
院子里的人来来去去，或者悄无声息的分别，或者大张旗鼓的离散，为这春天同样添加了不一样的味道。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MySQL存储过程和函数</title>
      <link>https://shuixingzhou.github.io/post/mysql-stored-procedure-and-function/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/mysql-stored-procedure-and-function/</guid>
      <description>存储过程（stored procedure）和函数（function）是事先经过编译并存储在数据库中的一段SQL语句的集合。 1. 存储过程 创建过程 创建一个简单的存储过程，接受两个整型输入参数，计算二者之和，然后将其输出给一个整型参数。
DROP PROCEDURE IF EXISTS `proc_add`; DELIMITER // CREATE DEFINER=`root`@`localhost` PROCEDURE `proc_add`(IN a int, IN b int, OUT sum int) # DEFINER=`root`@`localhost` 创建者 BEGIN #Routine body goes here... DECLARE c int; if a is null then set a = 0; end if; if b is null then set b = 0; end if; set sum = a + b; END // DELIMITER ;  调用过程 mysql&amp;gt; set @b=5; mysql&amp;gt; call proc_add(2,@b,@s); mysql&amp;gt; select @s; +------+ | sum | +------+ | 7 | +------+ 1 row in set (0.</description>
    </item>
    
    <item>
      <title>万网域名解析记录</title>
      <link>https://shuixingzhou.github.io/post/domain-name-resolution/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/domain-name-resolution/</guid>
      <description>采用的阿里云旗下万网域名。域名解析直接进入阿里云控制台选择域名点击解析即可。 一、记录类型 1. A记录： 将域名指向一个IPv4地址（例如：10.10.10.10），需要增加A记录
2. CNAME记录： 如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录
3. MX记录： 建立电子邮箱服务，将指向邮件服务器地址，需要设置MX记录
4. NS记录： 域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置NS记录
5. TXT记录： 可任意填写（可为空），文本长度限制为512，通常用做SPF记录（反垃圾邮件）使用
6. AAAA记录： 将主机名（或域名）指向一个IPv6地址（例如：ff03:0:0:0:0:0:0:c1），需要添加AAAA记录
7. SRV记录： 记录提供特定的服务的服务器。格式为：服务的名字.协议的类型（例如：_example-server._tcp）
8. CAA CA证书颁发机构授权校验
9. 显性URL： 将域名302重定向到另外一个地址，并且显示真实目标地址。将www.example.com 显性转发到www.hichina.com 后，访问www.example.com 时，地址栏显示的地址为：www.hichina.com）。
10. 隐性URL： 将域名302重定向到另外一个地址，但是隐藏真实目标地址。例如：将www.net.cn 隐性转发到www.hichina.com后， 访问www.net.cn时， 地址栏显示的地址仍然为：www.net.cn。
注意：选择需要的类型即可，无需所有都选上。常用的记录类型有A，CNAME。
二、 主机记录 主记录就是域名前缀，与域名共同组成解析对象。常见如下：
www：
将域名解析为www.example.com，填写www；
@：
将域名解析为example.com（不带www），填写@或者不填写；
mail：
将域名解析为mail.example.com，用于解析邮箱服务器；
* ：
泛解析，所有子域名均被解析到统一地址（除单独设置的子域名解析）；
二级域名：
如：mail.example.com或abc.example.com，填写mail或abc；
手机网站：
如：m.example.com，填写m。
三、记录值 记录值需要根据记录类型设置解析结果。
 A主机记录和记录值需要填写服务器IP地址（必须为IPv4地址，例如：119.75.217.109）。如果IP地址的格式中带有端口，如：119.75.217.109:8080，则只添加119.75.217.109即可。
 CNAME记录值填写空间服务商提供给您的域名（例如：hichina.com）。
 MX记录值请填写邮件服务商提供给您的域名（例如：hichina.com）。
 NS记录值，NS向下授权，请填写DNS域名（例如：example.hichina.com）。
 TXT记录值可以随意填写文本（长度不能超过512，不支持反斜杠字符&amp;rdquo;\&amp;ldquo;），不可为空，一般用作企业邮箱的反垃圾邮件设置。
 AAAA记录值请填写一个IPv6地址（例如：ff03:0:0:0:0:0:0:c1）。</description>
    </item>
    
    <item>
      <title>域名CNAME设置</title>
      <link>https://shuixingzhou.github.io/post/cname-setting/</link>
      <pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/cname-setting/</guid>
      <description>在github pages和netlify服务成功设置之后，我想通过CNAME将这两个网站归并到我自己的域名之下，该域名之前解析到阿里云虚拟共享主机。很不幸，重新设置CNAME结果失败。此后，新申请了一个域名，然后将新的域名解析到github pages服务器上，结果可以正常运行。现在将这两次经历均记录如下。 1. 二级域名CNAME 起初，我的目的上将部署在github pages 和netlify的网站放在之前申请的域名之下以二级域名的形式统一管理。 假定原域名是example.top,现在采用CNAME将github pages网站放在原域名之下管理，如test.example.top。我期待的结果是当我在浏览器输入test.example.top时自动打开github pages网站。结果显示我想要的太多。example.top可以打开，但是test.example.top显示No Found。
netlify设置就要简单的多了，现在域名控制台添加解析CNAME记录，将test1.example.top记录指向原网站sitename.netlify.com。然后在netlify配置页，添加一个Custom domains也就了test1.example.top就可了！ 然后，test1.example.top和sitename.netlify.com都可以进入网站。此处需要注意的是：以这两个域名进入网站之后浏览器地址栏显示各自的域名，而不是像github pages那么在浏览器地址栏都显示test.example.top。
2. 新域名CNAME设置 历尽多次挫折之后，索性我又申请了一个新的域名，another.top，（好在现在这些莫名其妙的域名比较便宜），然后重新对域名进行解析。在域名控制台使用CNAME记录类型，分别将www和@解析到username.github.io。然后在github中在username.github.io根目录下添加一个CNAME文件（就是一个名字为CNAME没有扩展名的文件），文件内容很简单，就是another.top。注意：没有http://或者www等。
设置完成之后，立刻满怀期待的在浏览器中输入another.top，结果依旧显示No Found。 我去，感觉被一盆冷水给浇成了落汤鸡。不爽的心情持续了十几分钟，心里终是不敢，又在浏览器中输入了another.top，竟然成功了！成功的连接到了username.github.io上的个人网站。成功的也让我一脸懵逼。多搜了几篇教程之后才发现解析是需要时间的！
成功之后，发现无论在浏览器中输入another.top还是输入username.github.io结果都是显示another.top。在cmd终端ping一下，发现这两个域名结果一样。
3. 意外的惊喜 就在我采用新的域名成功设置了CNAME之后，聪明如我[汗。。。]突然发现在我使用之前的那个域名，即example.top时好像忘了添加一个CNAME文件。按照新域名的流程，重新设置了原来那个域名之后，终于也成功了。
浪费了自己这么多的时间，还让我重新申请了一个域名，我的感情我的钱啊！真狠不得给自己两耳光，当然还是舍不得啦。
啦。</description>
    </item>
    
    <item>
      <title>Test on git addins in Rstudio</title>
      <link>https://shuixingzhou.github.io/post/test-on-git-addins-in-rstudio/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/test-on-git-addins-in-rstudio/</guid>
      <description>Now i find a very interesting addins of Rstudio&amp;ndash;git. I used to use git as my version control tool. However never did i notice that Rstudio colected this funciton. It is really interesting!
There are some methods in Rstudio to use git addins.
TODO: finish this later!
later!</description>
    </item>
    
    <item>
      <title>如何把本地项目上传到github上去？</title>
      <link>https://shuixingzhou.github.io/post/2018-03-27-git-local-remote/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/2018-03-27-git-local-remote/</guid>
      <description>Git作为最知名的开源版本控制系统,常用于快捷高效地处理各类项目。
一直纠结于如何快速的将本地项目推送到github远程服务器上去，今天收集了部分资料，记录如下。 1. 常用命令 git init
首先进入项目根目录，初始化该项目，将项目加入git管理，该目录就是git的工作目录。运行该命令后会在根目录下新建一个.git的目录，用于保存所有的版本记录。
关于工作目录下的文件状态：
工作目录下面的所有文件都不外乎这两种状态：已跟踪或未跟踪。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是未更新，已修改或者已放入暂存区。而所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复。  git add -A
将根目录下的所有文件添加到暂存处（stage area）。
git commit -m &amp;ldquo;first commit&amp;rdquo;
上传更新以及注释信息。
git remote add origin https://github.com/usrname/projectname.git
将本地仓库与远程仓库关联起来。注意：采用ssh的方法如果没有在本地电脑存入证书会出现报错。
git push -u origin master
上传项目到远程仓库。注意，git push origin master实际是git push origin master:master的简写形式， 意为将本地master分支推送到远程master（origin:master）上去。
git status
查看git状态。
git clone &amp;hellip;
从远程服务器克隆仓库到本地。Git 支持许多数据传输协议，git://... 协议 http(s):// ...或者user@server:/path.git SSH传输协议。
git fetch
远程跟踪分支已更新(Git术语叫做commit)，需要将这些更新取回本地，这时就要用到git fetch命令。
git pull &amp;hellip;
该命令作用是取回远程主机某个分支的更新，再与本地的指定分支合并。git pull是git fetch后跟git merge FETCH_HEAD的缩写。
2. 常见错误以及解决方法  使用git remote add .</description>
    </item>
    
    <item>
      <title>对家的思念</title>
      <link>https://shuixingzhou.github.io/life/homesick-03-26/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/life/homesick-03-26/</guid>
      <description>作为一名尚未成家立业本该努力奋斗的少年，时不时总有抛开一切回到家里的想法。这是病，真的治。在英文中用homesick来表达对思家念家之情，简直是太正确了！ 如果要找一首表达思乡之情的古诗，除开《静夜思》外，现在能够脱口而出的就是贺知章的回乡偶书二首。
离别家乡岁月多，近来人事半消磨。 唯有门前镜湖水，春风不改旧时波。  少小离家老大回，乡音未改鬓毛衰。 儿童相见不相识，笑问客从何处来。  家乡风景依旧，想来物是人非。逐日奔波，事无所成。大概此时对家乡的思念之情才会迸发而出一发不可收拾。
拾。</description>
    </item>
    
    <item>
      <title>部署个人网站到netlify服务器</title>
      <link>https://shuixingzhou.github.io/post/test-on-netlify/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/test-on-netlify/</guid>
      <description>看到网上许多教程都讲静态网站托管到netlify上,今天我也尝试了一下。 1. 部署步骤 前期借助于HUGO、Rblogdown等工具成功创建了个人的静态网站。同时也成功的部署到了github pages服务上。在此前我已经尝试过将静态网站部署到netlify，但是总是遇到配置错误。今天搜到了一个更加详细的中文教程，重新尝试了一下果然成功。暂时mark一下，等有时间了在好好看看当初没什么总是配置错误。
使用Github账号登陆Netlify 的官网，点击New site from Git， 选择要上传的的仓库。然后等待该服务器进行配置，过一段时间网站就建立好了。
2. 个人疑惑 现在我已经成功的在netlify和github pages上成功的建立了自己的个人网站，那么这两个托管服务有哪些区别呢？初步来看，个人认为主要的区别是，github pages仅能部署一个网站，网站名与用户名必须一致，而netlify则可以托管多个站点。当然，这两个网站共同点都是能够自动同步github仓库里的更新！That is awesome!
esome!</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://shuixingzhou.github.io/post/2018-03-24-hugoisforlovers/</link>
      <pubDate>Sat, 24 Mar 2018 21:13:14 -0500</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/2018-03-24-hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate from jekyll</title>
      <link>https://shuixingzhou.github.io/post/2018-03-24-migrate-from-jekyll/</link>
      <pubDate>Sat, 24 Mar 2018 21:13:14 -0500</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/2018-03-24-migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>MySQL基础：常用命令整理</title>
      <link>https://shuixingzhou.github.io/post/mysql-basic-syntax/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/mysql-basic-syntax/</guid>
      <description>MySQL是甲骨文旗下的一款开源的也是目前最为流行的数据库管理系统（DBMS,Database management system）。MySQL是一种典型的关系型数据库系统（RDBMS，Relational Database Management System)。 create database dbname; # 创建数据库 show databases; # 显示当前连接下的所有数据库 use dbname; # 进入dbname数据库 create table tbname (id int, name char(20)) # 创建表tbname，该表有两个字段 show tables; # 显示当前数据库所有的表 desc tbname; # 显示tbname表的信息 describe tbname; # 显示tbname表的信息 show columns from tbname; # 显示tbname表的信息 show create table tbname; # 显示tbname表创建时的信息 insert into tbname (id, name) values (1, &#39;xiaoming&#39;); # 插入记录 select * from tbname; # 查询tbname表所有记录 select id,name from tbname where id=1; # 条件查询tbname表记录 delete from tbname; # 删除表中所有信息 drop table tbname; # 删除表 drop database dbname; # 删除数据库 update tbname set name=&#39;joe&#39; where id=1; # 更新数据 alter table tbname add score float(4) default &#39;0&#39;; # 添加字段 alter table tbname drop column column_name; # 删除字段 alter table tbname change score grade float(4); # 修改字段名 alter table tb_article modify column name varchar(20); # 修改字段类型 rename tbname to tbname_new; # 修改表名 select user(); # 显示当前用户 select database(); # 显示当前数据库名 select now()，current_date(); # 查询时间 show table status like &#39;tbname&#39;; # 显示表的状态 show version(); # 查看MySQL版本 source D:/test.</description>
    </item>
    
    <item>
      <title>这一年的思念</title>
      <link>https://shuixingzhou.github.io/life/missyou/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/life/missyou/</guid>
      <description>不知不觉间，出差的时间已经超过了一年。很难想想能够忍受这样分别的日子，更难想象这样的日子已经超过了一年。远方的人啊，并非是我成心，或许只是懦弱。愿你不像我思念你这样的思念我。 平生不会相思，才会相思，便害相思。 身似浮云，心如飞絮，气若游丝，空一缕馀香在此，盼千金游子何之。 证候来时，正是何时？灯半昏时，月半明时。  平时口拙嘴笨，难以表达内心的思念之情。唯有珍惜现在的时光，努力充实自己，但愿再聚时能够更加勇敢、更加坚强。
车遥遥，马憧憧，均有东山东复东，安能奋飞逐西风。 愿我如星君如月，夜夜流光相皎洁。 月暂晦，星长明。 留明待月复，三五共盈盈。  阳光仍然很好，院落依旧寂静。从早晨的春寒料峭，到午后的日上栏杆，心情些许燥热。这北方的气候是在恼人，虽然在这里呆了这么久，但是心情和身体依旧双双受到煎熬。
过几日杨柳或许吐出新芽，草地也会披上绿装。希望那时能够感受到似远方的风和日丽。
丽。</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://shuixingzhou.github.io/post/2018-03-24-creating-a-new-theme/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/2018-03-24-creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Hugo Template Primer</title>
      <link>https://shuixingzhou.github.io/post/hugo-template-primer/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/hugo-template-primer/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.</description>
    </item>
    
    <item>
      <title>今天突然突然涌上心头的诗</title>
      <link>https://shuixingzhou.github.io/life/poem-today-03-24/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/life/poem-today-03-24/</guid>
      <description>今天周末，天气虽然很好，但是没有踏春的愿望。春风、杨柳与暖日于我如烟云，我这不解风情人啊。忙忙碌碌一天终于完成了网站并且部署到github上了，此刻心中多少还是有些成就感的。 每当一个人的时候，无论是走路还是工作，我都会不自觉的把那些最近记忆比较深刻的诗词轻声背出来。虽然记忆深刻，但是也有卡顿的时候。现在将今天记忆比较深的诗词记录如下：
春未老，风细柳斜斜。试上超然台上看，半壕春水一城花，烟雨暗千家。 寒食后，酒醒却咨嗟。休对故人思故国，且将新火试新茶。诗酒趁年华。  这是苏轼的一首《望江南》，描写的春天烟雨朦胧的景致。我在北方，虽然现在正是春天，但是很难有这种春雨连连的日子。之所以能够记起，大概是音律和谐，篇幅简单，而又与我出差在外的心境相合吧。
晨起动征铎，客行悲故乡。 鸡声茅店月，人迹板桥霜。 槲叶落山路，枳花明驿墙。 因思杜陵梦，凫雁满回塘。  温庭筠的‘鸡声茅店月，人迹板桥霜’千古名句，很早就知道，但是整首诗却在近一段时间才记下来。这短短的十个字，描写了秋冬早晨的景色，动静相宜，如同白描的一幅朦胧的水墨画。
纱窗日暖渐黄昏，金屋无人见泪痕。 寂寞空庭春欲晚，梨花满地不开门。  作为一个直男，这种闺怨诗之所以能够进入我的脑海完全不是因为共鸣（囧），我倒确实喜欢后两句的寂寥的环境。
梦后楼台高锁，酒醒帘幕低垂。 去年春恨却来时，落花人独立，微雨燕双飞。 记得小频初见，两重心字罗衣。 琵琶弦上说相思，当时明月在，曾照彩云归。  ‘落花人独立，微雨燕双飞’在我最喜欢的诗词中应该能够排到前五。虽然这两句并非晏几道原创，但是放在他的词中毫无PS痕迹，这两句也因晏几道而广为人知，对于原创翁宏来说不知是喜是悲。
羞日遮罗袖，愁春懒起妆。 易求无价宝，难得有情郎。 枕上潜垂泪，花间暗断肠。 既能窥宋玉，何必恨王昌。  古时才女本就不多，能有诗文传世更是少之又少。很庆幸还是有那么几位女性诗人、词人为古诗词添加了别用的光彩。&amp;rsquo;易求无价宝，难得有情郎&amp;rsquo;应该是人尽皆知了，记得这首诗的原因还是想把它推荐给家里领导，让她知道有情郎是多么的难得，也稍稍提高一下我在家里的地位。。。
当然能够记起的诗词还有其他几首，但是如果今天都记录下来了，那么明天还有什么可写的呢？
呢？</description>
    </item>
    
    <item>
      <title>利用Rblogdown建立个人博客网站</title>
      <link>https://shuixingzhou.github.io/post/rblogdown-to-build-website/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/rblogdown-to-build-website/</guid>
      <description>一直都有建一个个人网站的打算，为此我还申请了域名、购买了主机。但是一直都没有找到合适的建站模板。此前尝试过织梦、Wordpress和django等，但都有各自的不理想之处。遇上Rblogdown后算是一见倾心。今天终于完成了Rblogdown建个人网站的项目，现在讲建站过程以及遇到的问题记录下来以便日后查询。  1.软件准备 Rblogdown是基于HUGO技术的一个R扩展包，是谢益辉 大神为大家准备的又一个神兵利器。想要通过Rblogdown来建立自己的网站，首先要安装相关的程序。
R与R IDE
毫无疑问首先需要安装R语言， 同时R语言IDE个人推荐使用RStudio。然后需要安装我们的主角，Rblodown扩展包。采用RStudio和Rblogdown应该是一个捷径。
我个人的平台以及相关安装包如下：
sessionInfo()  Hugo程序安装
可以到github(https://github.com/gohugoio/hugo/releases) 上下载与个人系统相对应的安装包。同时如果成功安装了Rblogdown扩展包也可以采用blogdown::install_hugo()来安装Hugo程序。
网站主题
个人多次失败的经验表明，虽好还是在建站之前选好主题。Hugo官网（https://themes.gohugo.io/） 展示了许多不错的主题，简约、炫酷、低调、奢华应有尽有，可以根据个人喜好选择。选定之后可以直接下载下来，当然也可以在建站的同时指定这一个主题也是可以。如果指定主题，那么建站时自动会帮我们下载这个主题。我采用的主题是Mainroad。
2. 创建网站 当需要的各种软件准备好之后，就可以正是开始搭建自己的个人网站了。所有的操作均可以在RStudio中进行的。
blogdown::new_site(dir = &amp;quot;.&amp;quot;, theme = &amp;quot;Vimux/Mainroad&amp;quot;)  就这么简单，个人的博客网站就这么建成了。但是现在还只是别人的网站，因为所有的网站文件均是别人的。 回到自己的工作目录，可以看到有以下目录和文件：
archetypes config.toml #配置文件，修改网站名、作者名和个人简介等 content #存放新添加的文章 data index.Rmd layouts #网站布局文件 public #将content里的内容解析成html文件 static #存放css和js等文件 themes #主题  此时在RStudio中利用server site()命令可以预览创建的网站。可以在RStudio预览窗格预览，也可在以浏览器以本地主机地址预览http://127.0.0.1。 后一种方法需要注意分配的端口。
3. 修改网站 要想让这个网站完全成为自己心目中所想的样子，还有一些工作要做。
导航栏目
导航栏目的更改是新手要面临的最基本也是最重要的难题之一。我在这个问题上被困了好久。依据主题建立的网站是这样的https://hugothemes.gitlab.io/mainroad/。 想要自己设置不同于模板的栏目，首先要在content目录下，新建想要作为主要导航栏目的文件夹。重点来了，新建文件夹之后还需要在每一个新建的文件夹下新建一个文件&amp;ndash;_index.md，否则将会出错。有些主题模板还需要在config.toml文件中进行导航栏目设置，或者在layouts文件夹下partial/menu.html中进行设置，而我采用的Mainroad模板根据content目录里的内容自动生成。
格式或者样式调整
采用的模板之前是灰色主基调加上暗红色的条线等，可以在主题模板文件夹下的css目录下的css文件中依据自己的爱好进行调整。
4. 网站发布 如果没有自己的域名和主机，网站可以利用github的pages服务免费发布在GitHub网站上。具体操作如下：首先在github新建一个 以自己用户名为名字的仓库（repository）。在发布之前需要在配置文件config.toml中将baseurl修改为你的github的pages服务如https://&amp;lt;yourname&amp;gt;.github.io/。 然后进入public文件夹，利用git命令将建站文件提交即可。
cd public git init git add -A git commit -m &amp;quot;first commit&amp;quot; git remote add origin https://github.</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>https://shuixingzhou.github.io/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>https://shuixingzhou.github.io/post/2015-07-23-r-rmarkdown/</guid>
      <description>R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
  </channel>
</rss>